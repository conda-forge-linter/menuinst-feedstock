From ead67bb690eaf2fec880107cc40c588b378f8c78 Mon Sep 17 00:00:00 2001
From: Isuru Fernando <isuruf@gmail.com>
Date: Wed, 10 Aug 2022 11:39:07 -0700
Subject: [PATCH 1/2] Copy ShellExecuteEx from conda to replace pywin32

---
 .github/workflows/tests.yml |   1 -
 menuinst/win_elevate.py     | 110 ++++++++++++++++++++++++++++++++----
 setup.py                    |   4 +-
 3 files changed, 99 insertions(+), 16 deletions(-)

diff --git a/.github/workflows/tests.yml b/.github/workflows/tests.yml
index 48b85d59..cd3510ed 100644
--- a/.github/workflows/tests.yml
+++ b/.github/workflows/tests.yml
@@ -8,7 +8,6 @@ jobs:
     runs-on: ${{ matrix.os }}-latest
     timeout-minutes: 30
     env:
-      dependencies: pywin32
       test-dependencies: pytest pytest-cov conda
     strategy:
       fail-fast: false
diff --git a/menuinst/win_elevate.py b/menuinst/win_elevate.py
index 249609c0..c9ff0dcc 100644
--- a/menuinst/win_elevate.py
+++ b/menuinst/win_elevate.py
@@ -10,6 +10,7 @@
 
 from __future__ import print_function
 import sys, os, traceback
+from enum import IntEnum
 
 if sys.version_info < (3,):
     text_type = basestring
@@ -35,24 +36,101 @@ def isUserAdmin():
         raise RuntimeError("Unsupported operating system for this module: %s" % (os.name,))
 
 
+# Taken from conda/common/_os/windows.py
+if os.name == 'nt':
+
+    def ensure_binary(value):
+        try:
+            return value.encode('utf-8')
+        except AttributeError:  # pragma: no cover
+            # AttributeError: '<>' object has no attribute 'encode'
+            # In this case assume already binary type and do nothing
+            return value
+
+    from ctypes import (POINTER, Structure, WinError, byref, c_ulong, c_char_p, c_int,
+                        c_void_p, sizeof, windll)
+    from ctypes.wintypes import HANDLE, BOOL, DWORD, HWND, HINSTANCE, HKEY
+    PHANDLE = POINTER(HANDLE)
+    PDWORD = POINTER(DWORD)
+    SEE_MASK_NOCLOSEPROCESS = 0x00000040
+    INFINITE = -1
+
+    WaitForSingleObject = windll.kernel32.WaitForSingleObject
+    WaitForSingleObject.argtypes = (HANDLE, DWORD)
+    WaitForSingleObject.restype = DWORD
+
+    GetExitCodeProcess = windll.kernel32.GetExitCodeProcess
+    GetExitCodeProcess.argtypes = (HANDLE, PDWORD)
+    GetExitCodeProcess.restype = BOOL
+
+    class ShellExecuteInfo(Structure):
+        """
+https://docs.microsoft.com/en-us/windows/desktop/api/shellapi/nf-shellapi-shellexecuteexa
+https://docs.microsoft.com/en-us/windows/desktop/api/shellapi/ns-shellapi-_shellexecuteinfoa
+        """
+
+        _fields_ = [
+            ('cbSize', DWORD),
+            ('fMask', c_ulong),
+            ('hwnd', HWND),
+            ('lpVerb', c_char_p),
+            ('lpFile', c_char_p),
+            ('lpParameters', c_char_p),
+            ('lpDirectory', c_char_p),
+            ('nShow', c_int),
+            ('hInstApp', HINSTANCE),
+            ('lpIDList', c_void_p),
+            ('lpClass', c_char_p),
+            ('hKeyClass', HKEY),
+            ('dwHotKey', DWORD),
+            ('hIcon', HANDLE),
+            ('hProcess', HANDLE)
+        ]
+
+        def __init__(self, **kwargs):
+            Structure.__init__(self)
+            self.cbSize = sizeof(self)
+            for field_name, field_value in kwargs.items():
+                if isinstance(field_value, str):
+                    field_value = ensure_binary(field_value)
+                setattr(self, field_name, field_value)
+
+    PShellExecuteInfo = POINTER(ShellExecuteInfo)
+    ShellExecuteEx = windll.Shell32.ShellExecuteExA
+    ShellExecuteEx.argtypes = (PShellExecuteInfo, )
+    ShellExecuteEx.restype = BOOL
+
+
+class SW(IntEnum):
+    HIDE = 0
+    MAXIMIZE = 3
+    MINIMIZE = 6
+    RESTORE = 9
+    SHOW = 5
+    SHOWDEFAULT = 10
+    SHOWMAXIMIZED = 3
+    SHOWMINIMIZED = 2
+    SHOWMINNOACTIVE = 7
+    SHOWNA = 8
+    SHOWNOACTIVATE = 4
+    SHOWNORMAL = 1
+
+
 def runAsAdmin(cmdLine=None, wait=True):
     if os.name != 'nt':
         raise RuntimeError("This function is only implemented on Windows.")
 
-    import win32api, win32con, win32event, win32process
-    from win32com.shell.shell import ShellExecuteEx
-    from win32com.shell import shellcon
-
     python_exe = sys.executable
 
     if cmdLine is None:
         cmdLine = [python_exe] + sys.argv
     elif not hasattr(cmdLine, "__iter__") or isinstance(cmdLine, text_type):
         raise ValueError("cmdLine is not a sequence.")
+
     cmd = '"%s"' % (cmdLine[0],)
     # XXX TODO: isn't there a function or something we can call to massage command line params?
     params = " ".join(['"%s"' % (x,) for x in cmdLine[1:]])
-    showCmd = win32con.SW_HIDE
+    showCmd = SW.HIDE
     lpVerb = 'runas'  # causes UAC elevation prompt.
 
     # ShellExecute() doesn't seem to allow us to fetch the PID or handle
@@ -60,17 +138,25 @@ def runAsAdmin(cmdLine=None, wait=True):
     # the more complex ShellExecuteEx() must be used.
 
     # procHandle = win32api.ShellExecute(0, lpVerb, cmd, params, cmdDir, showCmd)
-
-    procInfo = ShellExecuteEx(nShow=showCmd,
-                              fMask=shellcon.SEE_MASK_NOCLOSEPROCESS,
+    execute_info = ShellExecuteInfo(nShow=showCmd,
+                              fMask=SEE_MASK_NOCLOSEPROCESS,
                               lpVerb=lpVerb,
                               lpFile=cmd,
-                              lpParameters=params)
+                              lpParameters=params,
+                              hwnd=None,
+                              lpDirectory=None)
+
+    successful = ShellExecuteEx(byref(execute_info))
+
+    if not successful:
+        raise WinError()
 
     if wait:
-        procHandle = procInfo['hProcess']
-        win32event.WaitForSingleObject(procHandle, win32event.INFINITE)
-        rc = win32process.GetExitCodeProcess(procHandle)
+        procHandle = execute_info.hProcess
+        WaitForSingleObject(procHandle, INFINITE)
+        err = DWORD()
+        GetExitCodeProcess(procHandle, byref(err))
+        rc = err.value
     else:
         rc = None
 
diff --git a/setup.py b/setup.py
index d2963834..1be79a97 100644
--- a/setup.py
+++ b/setup.py
@@ -16,10 +16,8 @@
                        "comdlg32", "advapi32", "shell32", "ole32", "oleaut32",
                        "uuid", "odbc32", "odbccp32"]
             )]
-    install_requires = ['pywin32']
 else:
     extensions = []
-    install_requires = []
 
 
 setup(
@@ -31,7 +29,7 @@
     long_description = open('README.rst').read(),
     ext_modules = extensions,
     include_package_data = True,
-    install_requires = install_requires,
+    install_requires = [],
     package_data = {"menuinst" : ["*.icns"]},
     license = "BSD",
     packages = ['menuinst'],

From a17f180d1ee743ed669cf09db6218a1db54dfd86 Mon Sep 17 00:00:00 2001
From: Isuru Fernando <isuruf@gmail.com>
Date: Fri, 12 Aug 2022 08:35:58 -0700
Subject: [PATCH 2/2] Add to changes

---
 CHANGES.txt | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/CHANGES.txt b/CHANGES.txt
index 4b98274f..4fec4650 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -1,3 +1,7 @@
+Unreleased:
+------------------
+  * Remove pywin32 dependency (#103)
+
 2021-09-10 1.4.18:
 ------------------
   * Merge in various patches used by conda-standalone (#85)
